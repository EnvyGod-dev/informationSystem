// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role.sql

package db

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO "Role" (
    "RoleName",
    "Description"
) VALUES (
    $1,
    $2
) RETURNING "ID", "RoleName", "Description"
`

type CreateRoleParams struct {
	RoleName    string
	Description string
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, arg.RoleName, arg.Description)
	var i Role
	err := row.Scan(&i.ID, &i.RoleName, &i.Description)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM 
    "Role"
WHERE 
    "ID" = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getRoles = `-- name: GetRoles :many
SELECT 
    "ID", "RoleName", "Description"
FROM 
    "Role"
ORDER BY 
    "RoleName" ASC
`

func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.RoleName, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :exec
UPDATE 
    "Role"
SET 
    "RoleName" = $1,
    "Description" = $2
WHERE 
    "ID" = $3
`

type UpdateRoleParams struct {
	RoleName    string
	Description string
	ID          int32
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateRole, arg.RoleName, arg.Description, arg.ID)
	return err
}
