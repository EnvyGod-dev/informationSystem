// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    "User" (
        "LastName",
        "FirstName",
        "UserName",
        "Email",
        "IsHashedPassword",
        "IsAdmin",
        "IsUser",
        "IsActive"
    )
VALUES
    (
        $1 :: VARCHAR(100),
        $2 :: VARCHAR(100),
        $3 :: VARCHAR(100),
        $4 :: VARCHAR(100),
        $5 :: TEXT,
        $6 :: BOOLEAN,
        $7 :: BOOLEAN,
        $8 :: BOOLEAN
    ) RETURNING "ID", "LastName", "FirstName", "UserName", "Email", "IsHashedPassword", "IsAdmin", "IsUser", "IsActive", "Created_At"
`

type CreateUserParams struct {
	LastName         string
	FirstName        string
	UserName         string
	Email            string
	IsHashedPassword string
	IsAdmin          bool
	IsUser           bool
	IsActive         bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.LastName,
		arg.FirstName,
		arg.UserName,
		arg.Email,
		arg.IsHashedPassword,
		arg.IsAdmin,
		arg.IsUser,
		arg.IsActive,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LastName,
		&i.FirstName,
		&i.UserName,
		&i.Email,
		&i.IsHashedPassword,
		&i.IsAdmin,
		&i.IsUser,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}
