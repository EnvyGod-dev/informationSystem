// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: booking.sql

package db

import (
	"context"
	"time"
)

const createBooking = `-- name: CreateBooking :one
INSERT INTO
    "Booking" (
        "UserID",
        "RoomID",
        "StartDate",
        "EndDate",
        "TotalPrice",
        "Status"
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6
    ) RETURNING "ID", "UserID", "RoomID", "StartDate", "EndDate", "TotalPrice", "Status", "Created_At"
`

type CreateBookingParams struct {
	UserID     int32
	RoomID     int32
	StartDate  time.Time
	EndDate    time.Time
	TotalPrice string
	Status     string
}

func (q *Queries) CreateBooking(ctx context.Context, arg CreateBookingParams) (Booking, error) {
	row := q.db.QueryRowContext(ctx, createBooking,
		arg.UserID,
		arg.RoomID,
		arg.StartDate,
		arg.EndDate,
		arg.TotalPrice,
		arg.Status,
	)
	var i Booking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoomID,
		&i.StartDate,
		&i.EndDate,
		&i.TotalPrice,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBooking = `-- name: DeleteBooking :exec
DELETE FROM
    "Booking"
WHERE
    "ID" = $1
`

func (q *Queries) DeleteBooking(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBooking, id)
	return err
}

const deleteBookingIfOwner = `-- name: DeleteBookingIfOwner :exec
DELETE FROM
    "Booking"
WHERE
    "ID" = $1
    AND "UserID" = $2
`

type DeleteBookingIfOwnerParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) DeleteBookingIfOwner(ctx context.Context, arg DeleteBookingIfOwnerParams) error {
	_, err := q.db.ExecContext(ctx, deleteBookingIfOwner, arg.ID, arg.UserID)
	return err
}

const getActiveOrNewBookings = `-- name: GetActiveOrNewBookings :many
SELECT
    "ID", "UserID", "RoomID", "StartDate", "EndDate", "TotalPrice", "Status", "Created_At"
FROM
    "Booking"
WHERE
    "Status" IN ('active', 'new')
`

func (q *Queries) GetActiveOrNewBookings(ctx context.Context) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, getActiveOrNewBookings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.StartDate,
			&i.EndDate,
			&i.TotalPrice,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookingUserId = `-- name: GetBookingUserId :many
SELECT
    "ID", "UserID", "RoomID", "StartDate", "EndDate", "TotalPrice", "Status", "Created_At"
FROM
    "Booking"
WHERE
    "UserID" = $1
`

func (q *Queries) GetBookingUserId(ctx context.Context, userid int32) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, getBookingUserId, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.StartDate,
			&i.EndDate,
			&i.TotalPrice,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookingsOrderedByStartDate = `-- name: GetBookingsOrderedByStartDate :many
SELECT
    "ID", "UserID", "RoomID", "StartDate", "EndDate", "TotalPrice", "Status", "Created_At"
FROM
    "Booking"
ORDER BY
    "StartDate" ASC
`

func (q *Queries) GetBookingsOrderedByStartDate(ctx context.Context) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, getBookingsOrderedByStartDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.StartDate,
			&i.EndDate,
			&i.TotalPrice,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpiredBookings = `-- name: GetExpiredBookings :many
SELECT
    "ID", "UserID", "RoomID", "StartDate", "EndDate", "TotalPrice", "Status", "Created_At"
FROM
    "Booking"
WHERE
    "EndDate" < CURRENT_DATE
`

func (q *Queries) GetExpiredBookings(ctx context.Context) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, getExpiredBookings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.StartDate,
			&i.EndDate,
			&i.TotalPrice,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListBooking = `-- name: GetListBooking :many
SELECT
    "ID", "UserID", "RoomID", "StartDate", "EndDate", "TotalPrice", "Status", "Created_At"
FROM
    "Booking"
`

func (q *Queries) GetListBooking(ctx context.Context) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, getListBooking)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.StartDate,
			&i.EndDate,
			&i.TotalPrice,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserBookings = `-- name: GetUserBookings :many
SELECT
    "ID", "UserID", "RoomID", "StartDate", "EndDate", "TotalPrice", "Status", "Created_At"
FROM
    "Booking"
WHERE
    "UserID" = $1
`

func (q *Queries) GetUserBookings(ctx context.Context, userid int32) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, getUserBookings, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.StartDate,
			&i.EndDate,
			&i.TotalPrice,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchBookingsByDateAndPrice = `-- name: SearchBookingsByDateAndPrice :many
SELECT
    "ID", "UserID", "RoomID", "StartDate", "EndDate", "TotalPrice", "Status", "Created_At"
FROM
    "Booking"
WHERE
    "EndDate" >= $1
    AND "TotalPrice" >= $2
`

type SearchBookingsByDateAndPriceParams struct {
	MinEndDate time.Time
	MinPrice   string
}

func (q *Queries) SearchBookingsByDateAndPrice(ctx context.Context, arg SearchBookingsByDateAndPriceParams) ([]Booking, error) {
	rows, err := q.db.QueryContext(ctx, searchBookingsByDateAndPrice, arg.MinEndDate, arg.MinPrice)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Booking
	for rows.Next() {
		var i Booking
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.StartDate,
			&i.EndDate,
			&i.TotalPrice,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBooking = `-- name: UpdateBooking :exec
UPDATE
    "Booking"
SET
    "StartDate" = $1,
    "EndDate" = $2,
    "TotalPrice" = $3,
    "Status" = $4
WHERE
    "ID" = $5
`

type UpdateBookingParams struct {
	StartDate  time.Time
	EndDate    time.Time
	TotalPrice string
	Status     string
	ID         int32
}

func (q *Queries) UpdateBooking(ctx context.Context, arg UpdateBookingParams) error {
	_, err := q.db.ExecContext(ctx, updateBooking,
		arg.StartDate,
		arg.EndDate,
		arg.TotalPrice,
		arg.Status,
		arg.ID,
	)
	return err
}
