// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: service.sql

package db

import (
	"context"
	"time"
)

const createService = `-- name: CreateService :one
INSERT INTO "Service" (
    "RoomID",
    "Description",
    "RequestedAt",
    "Status"
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING "ID", "RoomID", "Description", "RequestedAt", "Status"
`

type CreateServiceParams struct {
	RoomID      int32
	Description string
	RequestedAt time.Time
	Status      string
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRowContext(ctx, createService,
		arg.RoomID,
		arg.Description,
		arg.RequestedAt,
		arg.Status,
	)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Description,
		&i.RequestedAt,
		&i.Status,
	)
	return i, err
}

const getServicesByRoomID = `-- name: GetServicesByRoomID :many
SELECT 
    "ID", "RoomID", "Description", "RequestedAt", "Status"
FROM 
    "Service"
WHERE 
    "RoomID" = $1
ORDER BY 
    "RequestedAt" DESC
`

func (q *Queries) GetServicesByRoomID(ctx context.Context, roomid int32) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, getServicesByRoomID, roomid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.Description,
			&i.RequestedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
