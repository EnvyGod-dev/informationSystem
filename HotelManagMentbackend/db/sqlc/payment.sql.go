// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: payment.sql

package db

import (
	"context"
	"time"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO "Payment" (
    "BookingID",
    "Amount",
    "PaymentDate",
    "Status"
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING "ID", "BookingID", "Amount", "PaymentDate", "Status"
`

type CreatePaymentParams struct {
	BookingID   int32
	Amount      string
	PaymentDate time.Time
	Status      string
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.BookingID,
		arg.Amount,
		arg.PaymentDate,
		arg.Status,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.Amount,
		&i.PaymentDate,
		&i.Status,
	)
	return i, err
}

const getPayments = `-- name: GetPayments :many
SELECT 
    "ID", "BookingID", "Amount", "PaymentDate", "Status"
FROM 
    "Payment"
ORDER BY 
    "PaymentDate" DESC
`

func (q *Queries) GetPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.BookingID,
			&i.Amount,
			&i.PaymentDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
